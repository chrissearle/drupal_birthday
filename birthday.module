<?php
/**
 * Implementation of hook_help().
 */
function birthday_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Configure birthday module for content profile.');
  }
}

/**
 * Implementation of hook_menu().
 */
function birthday_menu() {
  $items = array();

  $items['admin/settings/birthday'] = array(
    'title' => 'Birthdays',
    'description' => 'Configure birthday block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('birthday_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function birthday_admin_settings() {
  $types = content_profile_get_types('names');


  $options = array();

  foreach ($types as $type => $name) {
    $result = db_query('SELECT * FROM {content_node_field_instance} WHERE widget_module = "date" AND type_name = "%s"', $type);

    while ($data = db_fetch_object($result)) {
      $options[$data->field_name] = $data->label;
    }
  }

  $form['birthdays_field'] = array(
    '#type' => 'radios',
    '#title' => t('Which field is your birthday field'),
    '#options' => $options,
    '#default_value' => variable_get('birthdays_field', ''),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_block().
 */
function birthday_block($op = 'list', $delta = 0, $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.
      $blocks[0] = array(
        'info'       => t('Birthdays today'),
      );

      return $blocks;
    case 'configure':
      $form = array();
      return $form;

    case 'view': default:
      // If $op is "view", then we need to generate the block for display
      // purposes. The $delta parameter tells us which block is being requested.
      switch ($delta) {
        case 0:
          // The subject is displayed at the top of the block. Note that it
          // should be passed through t() for translation.
          $block['subject'] = t('Birthdays today');
          // The content of the block is typically generated by calling a custom
          // function.
          $block['content'] = _birthdays_generate_birthday_today_block();
          break;
      }
      return $block;
  }
}

function _birthdays_generate_birthday_today_block() {
  $result = db_query("SELECT nid FROM {content_type_profile}");

  $output = '';

  $field = variable_get('birthdays_field', '');

  while ($data = db_fetch_object($result)) {
    $node = node_load($data->nid);

    $field_val = $node->$field;

    $dob = $field_val[0]['value'];

    $dob = substr($dob, 0, 10);

    $date = explode('-', $dob);

    $now = getdate();

    if ($now[mday] == $date[2] && $now[mon] == $date[1]) {
      $output .= '<li>'. t('%name is %years years old today', array('%name' => $node->title, '%years' => ($now['year'] - $date[0]))) .'</li>';
    }
  }

  if ($output != '') {
    $output = '<ul>'. $output .'</ul>';
  }

  return $output;
}
